// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('Verifier');

const proof = {
    "proof": {
        "a": ["0x0e832ac9328765188c8cb491bc9d05933306121220652cb2e3ff74bcab0dde76", "0x20683de8120bdea2e614022a4810b70594bc8d0bbf664f9db49b921a0a35935e"],
        "b": [["0x1fea5afcc8562f6b44ba532563a56aa0218855f80066928870f0065716f4f68a", "0x20593feb8c14bfb1a0257c886ff5e3a0098621a1e6c002b5cfdc394fca890011"], ["0x010372305017eee712fb33a56052f924f3cb2a72e15ab0fbd4d7a71c9cc67389","0x2f6f9315f2692c0c2c26093615770861bd615e098d1620b22a59af7b135fd87e"]],
        "c": ["0x23aff1359980b9fa43aee401d8e085efd58266dce73dc1abfb16fec7678f09f2", "0x09d2e9fe2f86cc4da8df7d58b5a3269e4bb0101ba8352c1855f1abd1208dc08c"]
    },
    "inputs": ["0x0000000000000000000000000000000000000000000000000000000000000007","0x0000000000000000000000000000000000000000000000000000000000000000"]
};


contract('TestSquareVerifier', async(accounts) => {
    before(async function () { 
      this.verifier = await SquareVerifier.new({from: accounts[0]});         
    });
    
    describe('Test verification', function () {
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('verifies with the correct proof', async function () { 
            let verified = await this.verifier.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs, {from: accounts[0]});
            assert.equal(true, verified, "The proof should be correct.");
        })

        // Test verification with incorrect proof
        it('with incorrect proof', async function () { 
            let failed = false;

            try {
                const verified = await this.verifier.verifyTx(proof.proof.a, proof.proof.b, proof.proof.b, ["1", "2"]);
                assert.equal(false, verification, "The proof should be incorrect.");

                // const VerifiedEvent = tx.logs.find((log) => log.event === 'Verified');
                // const verifiedEventEmitted = !!(VerifiedEvent);
                // failed = !verifiedEventEmitted;

            } catch (err) {
                failed = true;
            }

            //assert.equal(failed, true, "Verification should fail for incorrect proof");
        })
    });
})